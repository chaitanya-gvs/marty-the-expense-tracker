---
alwaysApply: true
description: Essential requirements for backend directory, Poetry environment, logging, and Python script execution
globs: *.py
---

### Backend Directory Requirement

- **ALWAYS** run commands from the `backend/` directory, not from the project root
- Before executing any Python command, script, or program, verify we're in the correct directory
- Use `cd backend/` or ensure the working directory is `/path/to/expense-tracker/backend/`
- This is critical because:
  - `pyproject.toml` is located in `backend/`
  - Poetry commands must be run from where `pyproject.toml` exists
  - All Python imports assume the backend directory as the working directory
  - Scripts in `backend/scripts/` expect to be run from `backend/`

### Python Script Execution Rule

- **ALL Python scripts/programs in backend MUST only run from the `backend/` directory**
- The `backend/` directory is added to PYTHONPATH in scripts to enable `src` imports
- This prevents common errors:
  - "Poetry could not find a pyproject.toml file" (when run from project root)
  - "No module named 'src'" (when scripts can't find the backend directory)
  - Import errors in our scripts
- Scripts use `sys.path.insert(0, str(backend_path))` to add backend to Python path

### Directory Verification

Before running any command, check:
```bash
# Verify we're in the right place
pwd  # Should show: /path/to/expense-tracker/backend
ls pyproject.toml  # Should exist
```

### Poetry Environment and Commands

- Always activate and use Poetry's virtual environment for any Python command
- Run commands from the `backend/` directory
- Python is managed via pyenv (3.11.x). Ensure the Poetry env points to pyenv's 3.11

Examples (run these in `backend/`):
- Install deps: `poetry install`
- Start API: `poetry run uvicorn main:app --reload`
- Lint: `poetry run ruff check . --fix`
- Tests: `poetry run pytest -q`
- Alembic: `poetry run alembic revision --autogenerate -m "msg" && poetry run alembic upgrade head`
- Run scripts: `poetry run python scripts/fetch_emails.py`
- Run main: `poetry run python main.py`

### Centralized Logging

- Use the logger from `src.utils.logger`
- Create named loggers: `from src.utils.logger import get_logger`; then `logger = get_logger(__name__)`
- Log messages with standard Python formatting (no `{}` placeholders); e.g., `logger.info(f"Processed {n} items")`

### Environment Variables

- Env values are in `backend/configs/.env` and secrets in `backend/configs/secrets/` (env-style files)
- Load via `python-dotenv` or Pydantic Settings as appropriate
- The module `src/utils/logger.py` already loads `configs/.env` for logging config; avoid duplicating loading unless needed

### Error Prevention

If you see errors like:
- "Poetry could not find a pyproject.toml file"
- "No module named 'src'"
- Import errors in scripts
- "No module named 'google_auth_oauthlib'" (missing dependencies)

**First check**: Are we in the `backend/` directory and using `poetry run`?