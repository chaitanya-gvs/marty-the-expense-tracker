"""Initial migration for existing tables

Revision ID: e8f7aea1fe10
Revises: 
Create Date: 2025-09-27 16:25:48.264123

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e8f7aea1fe10'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_bank_accounts_account_type'), table_name='accounts')
    op.drop_index(op.f('idx_bank_accounts_bank_name'), table_name='accounts')
    op.drop_index(op.f('idx_bank_accounts_statement_sender'), table_name='accounts')
    op.drop_index(op.f('ix_categories_active'), table_name='categories')
    op.drop_index(op.f('ix_categories_parent'), table_name='categories')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.drop_constraint(op.f('uq_categories_parent_name'), 'categories', type_='unique')
    op.drop_constraint(op.f('uq_categories_slug'), 'categories', type_='unique')
    op.drop_constraint(op.f('categories_parent_id_fkey'), 'categories', type_='foreignkey')
    op.drop_index(op.f('ix_tags_active'), table_name='tags')
    op.drop_index(op.f('ix_tags_slug'), table_name='tags')
    op.drop_constraint(op.f('uq_tags_name'), 'tags', type_='unique')
    op.drop_constraint(op.f('uq_tags_slug'), 'tags', type_='unique')
    op.drop_index(op.f('ix_transaction_tags_tag'), table_name='transaction_tags')
    op.drop_constraint(op.f('transaction_tags_transaction_id_fkey'), 'transaction_tags', type_='foreignkey')
    op.drop_constraint(op.f('transaction_tags_tag_id_fkey'), 'transaction_tags', type_='foreignkey')
    op.create_foreign_key(None, 'transaction_tags', 'tags', ['tag_id'], ['id'])
    op.create_foreign_key(None, 'transaction_tags', 'transactions', ['transaction_id'], ['id'])
    op.alter_column('transactions', 'split_breakdown',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('transactions', 'related_mails',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('transactions', 'raw_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('transactions', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.drop_index(op.f('idx_transactions_account'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_category_id'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_date'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_direction'), table_name='transactions')
    op.drop_index(op.f('idx_transactions_type'), table_name='transactions')
    op.drop_constraint(op.f('transactions_category_id_fkey'), 'transactions', type_='foreignkey')
    op.drop_constraint(op.f('transactions_link_parent_id_fkey'), 'transactions', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(op.f('transactions_link_parent_id_fkey'), 'transactions', 'transactions', ['link_parent_id'], ['id'])
    op.create_foreign_key(op.f('transactions_category_id_fkey'), 'transactions', 'categories', ['category_id'], ['id'])
    op.create_index(op.f('idx_transactions_type'), 'transactions', ['transaction_type'], unique=False)
    op.create_index(op.f('idx_transactions_direction'), 'transactions', ['direction'], unique=False)
    op.create_index(op.f('idx_transactions_date'), 'transactions', ['transaction_date'], unique=False)
    op.create_index(op.f('idx_transactions_category_id'), 'transactions', ['category_id'], unique=False)
    op.create_index(op.f('idx_transactions_account'), 'transactions', ['account'], unique=False)
    op.alter_column('transactions', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True,
               existing_server_default=sa.text("'{}'::text[]"))
    op.alter_column('transactions', 'raw_data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('transactions', 'related_mails',
               existing_type=sa.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('transactions', 'split_breakdown',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint(None, 'transaction_tags', type_='foreignkey')
    op.drop_constraint(None, 'transaction_tags', type_='foreignkey')
    op.create_foreign_key(op.f('transaction_tags_tag_id_fkey'), 'transaction_tags', 'tags', ['tag_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('transaction_tags_transaction_id_fkey'), 'transaction_tags', 'transactions', ['transaction_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_transaction_tags_tag'), 'transaction_tags', ['tag_id'], unique=False)
    op.create_unique_constraint(op.f('uq_tags_slug'), 'tags', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_tags_name'), 'tags', ['name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_tags_slug'), 'tags', ['slug'], unique=False)
    op.create_index(op.f('ix_tags_active'), 'tags', ['is_active'], unique=False)
    op.create_foreign_key(op.f('categories_parent_id_fkey'), 'categories', 'categories', ['parent_id'], ['id'], ondelete='SET NULL')
    op.create_unique_constraint(op.f('uq_categories_slug'), 'categories', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('uq_categories_parent_name'), 'categories', ['parent_id', 'name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=False)
    op.create_index(op.f('ix_categories_parent'), 'categories', ['parent_id'], unique=False)
    op.create_index(op.f('ix_categories_active'), 'categories', ['is_active'], unique=False)
    op.create_index(op.f('idx_bank_accounts_statement_sender'), 'accounts', ['statement_sender'], unique=False)
    op.create_index(op.f('idx_bank_accounts_bank_name'), 'accounts', ['bank_name'], unique=False)
    op.create_index(op.f('idx_bank_accounts_account_type'), 'accounts', ['account_type'], unique=False)
    # ### end Alembic commands ###
